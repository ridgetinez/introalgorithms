In information retrieval, tfidf, short for term frequencyinverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus. It is often used as a weighting factor in information retrieval and text mining. The tf-idf value increases proportionally to the number of times a word appears in the document, but is offset by the frequency of the word in the corpus, which helps to adjust for the fact that some words appear more frequently in general.

Variations of the tfidf weighting scheme are often used by search engines as a central tool in scoring and ranking a document's relevance given a user query. tfidf can be successfully used for stop-words filtering in various subject fields including text summarization and classification.

One of the simplest ranking functions is computed by summing the tfidf for each query term; many more sophisticated ranking functions are variants of this simple model.

Motivation

Term frequency

Suppose we have a set of English text documents and wish to determine which document is most relevant to the query "the brown cow". A simple way to start out is by eliminating documents that do not contain all three words "the", "brown", and "cow", but this still leaves many documents. To further distinguish them, we might count the number of times each term occurs in each document and sum them all together; the number of times a term occurs in a document is called its term frequency.

The first form of term weighting is due to Hans Peter Luhn (1957) and is based on the Luhn Assumption:
The weight of a term that occurs in a document is simply proportional to the term frequency. 
Inverse document frequency

Because the term "the" is so common, term frequency will tend to incorrectly emphasize documents which happen to use the word "the" more frequently, without giving enough weight to the more meaningful terms "brown" and "cow". The term "the" is not a good keyword to distinguish relevant and non-relevant documents and terms, unlike the less common words "brown" and "cow". Hence an inverse document frequency factor is incorporated which diminishes the weight of terms that occur very frequently in the document set and increases the weight of terms that occur rarely.

Karen Sparck Jones (1972) conceived a statistical interpretation of term specificity called IDF, which became a cornerstone of term weighting:
The specificity of a term can be quantified as an inverse function of the number of documents in which it occurs. 
Definition

tfidf is the product of two statistics, term frequency and inverse document frequency. Various ways for determining the exact values of both statistics exist.

Term frequency

In the case of the term frequency tf(t,d), the simplest choice is to use the raw frequency of a term in a document, i.e. the number of times that term t occurs in document d. If we denote the raw frequency of t by ft,d, then the simple tf scheme is tf(t,d) = ft,d. Other possibilities include
Boolean "frequencies": tf(t,d) = 1 if t occurs in d and 0 otherwise; logarithmically scaled frequency: tf(t,d) = 1 + log ft,d, or zero if ft,d is zero; augmented frequency, to prevent a bias towards longer documents, e.g. raw frequency divided by the maximum raw frequency of any term in the document: t f ( t , d ) = 0.5 + 0.5 f t , d max { f t , d : t d } {\displaystyle \mathrm {tf} (t,d)=0.5+0.5\cdot {\frac {f_{t,d}}{\max\{f_{t',d}:t'\in d\}}}} 
Inverse document frequency

The inverse document frequency is a measure of how much information the word provides, that is, whether the term is common or rare across all documents. It is the logarithmically scaled inverse fraction of the documents that contain the word, obtained by dividing the total number of documents by the number of documents containing the term, and then taking the logarithm of that quotient.
i d f ( t , D ) = log N | { d D : t d } | {\displaystyle \mathrm {idf} (t,D)=\log {\frac {N}{|\{d\in D:t\in d\}|}}} 
with
N {\displaystyle N} : total number of documents in the corpus N = | D | {\displaystyle N={|D|}} | { d D : t d } | {\displaystyle |\{d\in D:t\in d\}|} : number of documents where the term t {\displaystyle t} appears (i.e., t f ( t , d ) = 0 {\displaystyle \mathrm {tf} (t,d)\neq 0} ). If the term is not in the corpus, this will lead to a division-by-zero. It is therefore common to adjust the denominator to 1 + | { d D : t d } | {\displaystyle 1+|\{d\in D:t\in d\}|} . 
Term frequencyInverse document frequency

Then tfidf is calculated as
t f i d f ( t , d , D ) = t f ( t , d ) i d f ( t , D ) {\displaystyle \mathrm {tfidf} (t,d,D)=\mathrm {tf} (t,d)\cdot \mathrm {idf} (t,D)} 
A high weight in tfidf is reached by a high term frequency (in the given document) and a low document frequency of the term in the whole collection of documents; the weights hence tend to filter out common terms. Since the ratio inside the idf's log function is always greater than or equal to 1, the value of idf (and tf-idf) is greater than or equal to 0. As a term appears in more documents, the ratio inside the logarithm approaches 1, bringing the idf and tf-idf closer to 0.

Justification of idf

Idf was introduced, as "term specificity", by Karen Sparck Jones in a 1972 paper. Although it has worked well as a heuristic, its theoretical foundations have been troublesome for at least three decades afterward, with many researchers trying to find information theoretic justifications for it.

Sparck Jones's own explanation did not propose much theory, aside from a connection to Zipf's law. Attempts have been made to put idf on a probabilistic footing, by estimating the probability that a given document d contains a term t as the relative document frequency,
P ( t | d ) = | { d D : t d } | N , {\displaystyle P(t|d)={\frac {|\{d\in D:t\in d\}|}{N}},} 
so that we can define idf as
i d f = log P ( t | d ) = log 1 P ( t | d ) = log N | { d D : t d } | {\displaystyle {\begin{aligned}\mathrm {idf} &=-\log P(t|d)\\&=\log {\frac {1}{P(t|d)}}\\&=\log {\frac {N}{|\{d\in D:t\in d\}|}}\end{aligned}}} 
Namely, the inverse document frequency is the logarithm of "inverse" relative document frequency.

This probabilistic interpretation in turn takes the same form as that of self-information. However, applying such information-theoretic notions to problems in information retrieval leads to problems when trying to define the appropriate event spaces for the required probability distributions: not only documents need to be taken into account, but also queries and terms.

Example of tfidf

Suppose that we have term count tables of a corpus consisting of only two documents, as listed on the right.

The calculation of tfidf for the term "this" is performed as follows:

In its raw frequency form, tf is just the frequency of the "this" for each document. In each document, the word "this" appears once; but as the document 2 has more words, its relative frequency is smaller.
t f ( t h i s , d 1 ) = 1 5 = 0.2 {\displaystyle \mathrm {tf} ({\mathsf {''this''}},d_{1})={\frac {1}{5}}=0.2} t f ( t h i s , d 2 ) = 1 7 0.14 {\displaystyle \mathrm {tf} ({\mathsf {''this''}},d_{2})={\frac {1}{7}}\approx 0.14} 
An idf is constant per corpus, and accounts for the ratio of documents that include the word "this". In this case, we have a corpus of two documents and all them include the word "this".
i d f ( t h i s , D ) = log ( 2 2 ) = 0 {\displaystyle \mathrm {idf} ({\mathsf {''this''}},D)=\log \left({\frac {2}{2}}\right)=0} 
So tfidf is zero for the word "this", which implies that the word is not very informative as it appears in all documents.
t f i d f ( t h i s , d 1 ) = 0.2 0 = 0 {\displaystyle \mathrm {tfidf} ({\mathsf {''this''}},d_{1})=0.2\times 0=0} t f i d f ( t h i s , d 2 ) = 0.14 0 = 0 {\displaystyle \mathrm {tfidf} ({\mathsf {''this''}},d_{2})=0.14\times 0=0} 
A slightly more interesting example arises from the word "example", which occurs three times but only in the second document:
t f ( e x a m p l e , d 1 ) = 0 5 = 0 {\displaystyle \mathrm {tf} ({\mathsf {''example''}},d_{1})={\frac {0}{5}}=0} t f ( e x a m p l e , d 2 ) = 3 7 0.429 {\displaystyle \mathrm {tf} ({\mathsf {''example''}},d_{2})={\frac {3}{7}}\approx 0.429} i d f ( e x a m p l e , D ) = log ( 2 1 ) = 0.301 {\displaystyle \mathrm {idf} ({\mathsf {''example''}},D)=\log \left({\frac {2}{1}}\right)=0.301} 
Finally,
t f i d f ( e x a m p l e , d 1 ) = t f ( e x a m p l e , d 1 ) i d f ( e x a m p l e , D ) = 0 0.301 = 0 {\displaystyle \mathrm {tfidf} ({\mathsf {''example''}},d_{1})=\mathrm {tf} ({\mathsf {''example''}},d_{1})\times \mathrm {idf} ({\mathsf {''example''}},D)=0\times 0.301=0} t f i d f ( e x a m p l e , d 2 ) = t f ( e x a m p l e , d 2 ) i d f ( e x a m p l e , D ) = 0.429 0.301 0.13 {\displaystyle \mathrm {tfidf} ({\mathsf {''example''}},d_{2})=\mathrm {tf} ({\mathsf {''example''}},d_{2})\times \mathrm {idf} ({\mathsf {''example''}},D)=0.429\times 0.301\approx 0.13} 
(using the base 10 logarithm).

See also

References
Salton, G; McGill, M. J. (1986). Introduction to modern information retrieval. McGraw-Hill. ISBN 978-0070544840. Salton, G.; Fox, E. A.; Wu, H. (1983). "Extended Boolean information retrieval". Communications of the ACM. 26 (11): 10221036. doi:10.1145/182.358466. Salton, G.; Buckley, C. (1988). "Term-weighting approaches in automatic text retrieval". Information Processing & Management. 24 (5): 513523. doi:10.1016/0306-4573(88)90021-0. Wu, H. C.; Luk, R. W. P.; Wong, K. F.; Kwok, K. L. (2008). "Interpreting TF-IDF term weights as making relevance decisions". ACM Transactions on Information Systems. 26 (3): 1. doi:10.1145/1361684.1361686. 
External links and suggested reading
Gensim is a Python library for vector space modeling and includes tfidf weighting. Robust Hyperlinking: An application of tfidf for stable document addressability. A demo of using tfidf with PHP and Euclidean distance for Classification Anatomy of a search engine tfidf and related definitions as used in Lucene TfidfTransformer in scikit-learn Text to Matrix Generator (TMG) MATLAB toolbox that can be used for various tasks in text mining (TM) specifically i) indexing, ii) retrieval, iii) dimensionality reduction, iv) clustering, v) classification. The indexing step offers the user the ability to apply local and global weighting methods, including tfidf. Pyevolve: A tutorial series explaining the tf-idf calculation. TF/IDF with Google n-Grams and POS Tags